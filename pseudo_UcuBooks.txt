


    agregarLibro(libro)
	aux <- libro.autores.primero
	MIENTRAS <aux <> nulo>
	    nodo <- agregarAutores(aux.dato)
	    nodo.dato.insertar(nuevo Nodo(libro, libro.isbn))
	    aux <- aux.siguiente
	FIN MIENTRAS



    INodo agregarAutores(autor del tipo String)
	nodo <- biblioteca.buscar(autor)
	SI <nodo = nulo>
	    nuevoNodo <- nuevo Nodo(nuevo ListaLibros, autor)
	    biblioteca.insertar(nuevoNodo)
	    devuelve nuevoNodo
	FIN SI
	devuelve nodo
			
	


    eliminarLibro(isbn)
	aux <- biblioteca.primero
	MIENTRAS <aux <> nulo>
	    aux.dato.eliminar(isbn)
	    aux <- aux.siguiente
	FIN MIENTRAS




    eliminarAutor(autor del tipo String)
	aux <- biblioteca.buscar(autor)
	listaAEliminar <- aux.dato
	aux.dato <- nulo
	biblioteca.eliminar(autor)
	
	MIENTRAS <!listaAEliminar.esVacia>
	    aux2 <- biblioteca.primero
	    MIENTRAS <aux2 <> nulo>
		aux2.dato.eliminar(listaAEliminar.primero.etiqueta)
		aux2 <- aux2.siguiente
	    FIN MIENTRAS
	    listaAEliminar.eliminar(listaAEliminar.primero.etiqueta)
	FIN MIENTRAS
	listaAEliminar <- nulo






    mostrarPorAutor(autor del tipo String)
	nodo <- biblioteca.buscar(autor)
	nodo.dato.imprimirDatos



    mostrarPorNombre(nombre de tipo String)
	aux <- biblioteca.primero
	MIENTRAS <aux <> nulo>
	    aux.dato.buscarPorNombre(nombre).imprimirDatos
	    aux <- aux.siguiente
	FIN MIENTRAS


    mostrarPorGenero(tag de tipo String)
	aux <- biblioteca.primero
	MIENTRAS <aux <> nulo>
	    aux.dato.buscarPorTag(tag).imprimirDatos
	    aux <- aux.siguiente
	FIN MIENTRAS	
	
-------------------------------------------------------



    eliminarLibro(id de tipo int)
	listaLibros.eliminar(id)
	librosTags.eliminar(id)
	librosAutores.eliminar(id)



    eliminarAutor(autor de tipo String)
	aux <- listaAutores.primero
	idAutor <- 0
	MIENTRAS <aux <> nulo>
	    SI <aux.dato = autor>
		idAutor <- aux.etiqueta
	    FIN SI
	    aux <- aux.siguiente
	FIN MIENTRAS
	listaAutores.eliminar(idAutor)
	
	aux2 <- librosAutores.primero
	librosEliminados <- nueva Lista
	MIENTRAS <aux2 <> nulo>
	    SI <aux2.dato = idAutor>
		idLibro <- aux2.etiqueta
		librosEliminados.insertar(listaLibros.quitar(idLibro))
	    FIN SI
	    aux2 <- aux2.siguiente
	FIN MIENTRAS

	aux3 <- librosEliminados.primero
	MIENTRAS <aux3 <> nulo>
	    librosAutores.eliminar(aux3.etiqueta)
	    aux3 <- aux3.siguiente
	FIN MIENTRAS



    mostrarDetalles(id de tipo int)
	listaLibros.buscar(id).imprimir
	aux <- librosAutores.buscarLista(id).primero
	MIENTRAS <aux <> nulo>
	    listaAutores.buscar(aux.dato).imprimir
	FIN MIENTRAS
	aux2 <- librosTags.buscarLista(id).primero
	MIENTRAS <aux2 <> nulo>
	    listaTags.buscar(aux2.dato).imprimir
	FIN MIENTRAS




    mostrarPorTag(tag de tipo String)
	aux <- listaTags.primero
	idTag <- 0
	MIENTRAS <aux <> nulo>
	    SI <aux.dato = tag>
		idTag <- aux.etiqueta
	    FIN SI	
	    aux <- aux.siguiente
	FIN MIENTRAS
	
	aux2 <- librosTags.primero
	idLibro <- 0
	MIENTRAS <aux2 <> nulo>
	    SI <aux2.dato = idTag>
		idLibro <- aux2.etiqueta
	    FIN SI	
	    aux2 <- aux2.siguiente
	FIN MIENTRAS
	
	listaLibros.buscar(idLibro).imprimir




    mostrarPorAutor(autor de tipo String)
	aux <- listaAutores.primero
	idAutor <- 0
	MIENTRAS <aux <> nulo>
	    SI <aux.dato = autor>
		idAutor <- aux.etiqueta
	    FIN SI	
	    aux <- aux.siguiente
	FIN MIENTRAS
	
	aux2 <- librosAutores.primero
	idLibro <- 0
	MIENTRAS <aux2 <> nulo>
	    SI <aux2.dato = idAutor>
		idLibro <- aux2.etiqueta
	    FIN SI	
	    aux2 <- aux2.siguiente
	FIN MIENTRAS
	
	listaLibros.buscar(idLibro).imprimir	




    mostrarPorNombre(nombre de tipo String)
	aux <- listaLibros.primero
	MIENTRAS <aux <> nulo>
	    SI <aux.dato.nombre = nombre>
		aux.imprimir
	    FIN SI
	    aux <- aux.siguiente
	FIN MIENTRAS



